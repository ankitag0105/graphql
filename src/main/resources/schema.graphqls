type Link {
    id: ID!
    url: String!
    description: String
    postedBy: User
}


type Query {
  allLinks: [Link], 
  allLinksMongo: [Link] 
  allLinksFilter(filter: LinkFilter, skip: Int = 0, first: Int = 0):[Link]
}

type Mutation {
  createUser(name: String!, authProvider: AuthData!): User
  signinUser(auth:AuthData): SigninPayLoad
  createLink(url: String!, description: String!): Link,
  createLinkMongo(url: String!, description: String!): Link
  createVote(linkId: ID, userId: ID): Vote
}

input LinkFilter{
	url_contains: String
	description_contains:String
}

type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

scalar DateTime


input AuthData {
	email: String!
	password: String!
}


type SigninPayLoad {
	token: String!
	user: User!
}


type User{
	id: ID!
	name: String!
	email: String
	password: String
}	


schema {
  query: Query
  mutation: Mutation
}
